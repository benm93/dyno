import unittest

from algorithms import Sequences, DynoLibrary

class TestBackend(unittest.TestCase):

    def test_first_sequence(self):
        f = open('Parvoviridae_full_130_refseq_sequence.txt', 'rb')
        s = Sequences(f.read())
        self.assertEqual(s.sequences[0].gene, 'NS3')
        seq = 'ATGGCTTGCGTATACGGTATTGAGAACTGTGATCATACAAAGTGTTTTCGCTGTGGAGAGTGCACTAGAG'\
        'GCAGTCAAGTACATAGACTTTGTTATTCCAACATTACAGAGGAAGACTATGCGATATCACAGTTGCTTGC'\
        'CAGTAGTACAGAGTGTCTACCTACAGAAAGCGACGAAGAAACAGCAGACCAGATACGCTCAGATACGCCA'\
        'ATCAGTATGCAGGTACAAGAGTATCTCGATTGGGAGAATACTGCTCTATTTTCGACAACATACCGCTTTC'\
        'ATACATACTGGACACACTTTTATGGCGATCGTGAGGAGATTGATTCAGATTATAGTACTCCTGAGGCTAG'\
        'TGATGAGGATAGTCAATCACTGCTAAGGAACAAGATTAAAGTACATAGGTATCTTACAAGTGAAATGACT'\
        'GCACGAGAATTTTTTCTTGCAAATAGAGACTTTGATATTGATGTTTTGTGTTTGCCAGATGATTCTCTTA'\
        'TTAGAATGCGACTTGGTACAGTGACAAAATTTGATCCTATTGCTAAACAACATTTTGTGTATCATAAAGA'\
        'GTGTATTGATCCTGAACAATTTCATTTGACAGAAAAAGGATTCAGTAAAGCTGTTCTTTCAGTAAAAGCA'\
        'ACAAATAAGAATGCATTTATCTCATTAATTGAAGATCTGTTGTTTACATTTTTTTGTCAGGAGTGTAAGA'\
        'AATTTATTTTTCATACAGTGGAGTATATGGAAGATAGTGTATGGAAATTACCAAATGAAAACATCTGGCC'\
        'AGACTGCAAACATCTTTTATATAATTGTCACTTACTTTATGATTTAAATACTTATGTGAATTTGAAAGGA'\
        'CATAAATTAATTGCTACTGTTTCACCGCAGGAACCACCAACGAAACGGCAACGCCTAGAATTCCATGAAT'\
        'AA'
        self.assertEqual(s.sequences[0].sequence, seq)

    def test_last_sequence(self):
        f = open('Parvoviridae_full_130_refseq_sequence.txt', 'rb')
        s = Sequences(f.read())
        self.assertEqual(s.sequences[-1].gene, 'VP')
        seq = 'ATGGCAGACAGCACTTCAATGGACCATGATGGAGAACAACGAGGAACAAAACGAAAACGAGGAGCAGGCG'\
            'CTGGAGGATCAGGCGCAGGAATCGGAAAAGGAAATAGTAATTCCGTAAAAGAAGGTTATGGACCAAATAT'\
            'GACCGAAATGATCCCAAGAAATATTATGAACAAAGGAAATCATACGGTACTTCATACAGTAAAGCAGCAA'\
            'AAATACTTGGACTTCAACTTCGTATCGAATCAAAATCCATACATTATACCATATCAAACGGCAGGATTCT'\
            'GGGCATCAATGTGGGACCAAGGAGAAATCGAATCAAACAACACCATCAATATCATGAAAGCACTAAATAA'\
            'AGTAGCTCTAGGAGTAACATGGATCAAAGGAGAAATCACATTTGAAGTATATGCAGTAACCAGACAACGC'\
            'TTGCTAACGGGAACGACAAACCAAACTACATGGGACTTTGAAACAAGTCAAAACATGTTCATCGCAGACG'\
            'CAGACAGAGAACCAGAAAATTTCGGATTAACATCAGCAGCAGCAACTGGTCCACTCGCTCAACAAACAAC'\
            'ACAAACACTACTATTCAACAAAAACAACGACAGATACACAAAATATGAATTACCACAAAGAAATCAATAT'\
            'ACAAGAACAATTGACTTCCAAGAACTAACAAACAACTATATGTGGAAACCAACGGACATCAACGAAGAAG'\
            'CAAACTTTAGAAGATTGATCCCAATGTCGGAAGGAGTATATACAACAGCAAACGCAACAAGTAAAATGTC'\
            'AGAATTAACACAACAAAATTCAGCATGGGCAACATCAGGAAAAACAACACAAGGAACACTATTCAGAAAT'\
            'AGAACATCATATCCAAGAATGCATGTAGCACAACCACAAGTTCCAGATGAAACCGGATACATGAAATTCA'\
            'GATACCAAGTACGAATGAGCACAAAATTATACCTAATTTTTCATATGTTACCAGATTATGGATCATCAAC'\
            'ACAAACGGAATATATGCACAGACAAGTACTGGAATTGCCAGAAGTAACTGCAACAAACGGAGTAGTAACA'\
            'TGTATGCCGTATGAAATCAAAACTTAA'
        self.assertEqual(s.sequences[-1].sequence, seq)

    def test_search(self):
        f = open('Parvoviridae_full_130_refseq_sequence.txt', 'rb')
        s = Sequences(f.read())
        target = 'AGGAGGCGGAACAACCCAGTCAGCAATCAGAAGACGGAGTAGACGATTTTTTACAACAAGTAAGAGAT'
        results = DynoLibrary.search(s, target)
        self.assertTrue('lcl|NC_031450.1_cds_YP_009310055.1_4' in results)
    
    def test_search_hamming(self):
        f = open('Parvoviridae_full_130_refseq_sequence.txt', 'rb')
        s = Sequences(f.read())
        target = 'AGGAGGCGGAACAACCCAGTCAGCAATCAGAAGACGGAGTAGACGATTTTTTACAACAAGTAAGAGGT'
        results = DynoLibrary.search(s, target, 1)
        self.assertTrue('lcl|NC_031450.1_cds_YP_009310055.1_4' in results)

        

if __name__ == '__main__':
    unittest.main()